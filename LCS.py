import numpy as np
from cmath import inf
import matplotlib.pyplot as plt
#from grid_advection import particle_grid_displacement as pgd
from opendrift.models.oceandrift import OceanDrift
from opendrift.readers import reader_netCDF_CF_generic, reader_ROMS_native
import xarray as xr

def FTLE(file, outfile, DG=False, separation = None, duration=None):
    """
        Computes LCSs using the FTLE approach using the file from ParticleAdvector.py
        The function is tailored for attracting hyperbolic LCSs. If repelling LCSs are of interest, the resulting array needs to be reversed, i.e. RLCS[::-1, ::-1].
    Args:
        file       [str]    :   Name of file which contains intial and final positions of particles. Generated by ParticleAdvector.py
        outfile    [str]    :   Name of file where LCSs are saved to.
        DG         [bool]   :   Set to "True" if LCSs are to be generated for the Double-Gyre system. 
    Retunts:  
        outfile.nc  [str]   :   Name of file where LCSs are saved to. 
    """
    ds = xr.open_dataset(file)
    if separation is not None:
        sep = separation
    else:
        sep=ds.separation.values
    if duration is not None:
        dur = duration
    else:
        dur = ds.duration.values

    model=None
    if 'norkyst' in file:
        model='norkyst'
    elif 'barents' in file:
        model='barents'

    print('sep:',sep)
    print('model',model)

    x0 = np.array(ds.lon)
    y0 = np.array(ds.lat)

    nx, ny = x0.shape[0], x0.shape[1]
    x1 = np.reshape(np.array(ds.nlon), (nx, ny))
    y1 = np.reshape(np.array(ds.nlat), (nx, ny))

    
    largest_eig = np.zeros([nx,ny])
    for i in range(1,nx-1):
        for j in range(1,ny-1):
            
            F = np.zeros([2,2])
            F[0,0] = (x1[i+1, j]-x1[i-1, j])/(2*sep)
            F[0,1] = (x1[i, j+1]-x1[i, j-1])/(2*sep)
            F[1,0] = (y1[i+1, j]-y1[i-1, j])/(2*sep)
            F[1,1] = (y1[i, j+1]-y1[i, j-1])/(2*sep)
            
            C = np.dot(np.transpose(F), F)
            try:
                eig = np.linalg.eigvals(C)
            except:
                eig = 0
            np.seterr(divide = 'ignore')
            largest_eig[i,j] = np.log(np.sqrt(np.max(eig)))/dur
    largest_eig[largest_eig==-inf]=np.nan
    
    if DG is False:
        # It's important to have the correct file here for the projection
        o = OceanDrift(loglevel=20)
#        r = reader_netCDF_CF_generic.Reader(o.test_data_folder() + '16Nov2015_NorKyst_z_surface/norkyst800_subset_16Nov2015.nc')
        if model=='norkyst':
            r = reader_ROMS_native.Reader('/lustre/storeB/project/fou/hi/new_norkyst/his/ocean_his.an.20230628.nc')
            x0, y0 = r.xy2lonlat(x0/1000., y0/1000.)
        elif model=='barents':
            r = reader_netCDF_CF_generic.Reader('/lustre/storeB/project/fou/hi/barents_eps/eps/barents_eps_20230628T18Z.nc')
            x0, y0 = r.xy2lonlat(x0, y0)
    
    LCS = xr.Dataset(coords = dict(lon=(['x', 'y'], x0), lat=(['x','y'], y0)),
                    data_vars = dict(ALCS=(['x', 'y'], largest_eig[::-1,::-1])))

    LCS.to_netcdf(f'{outfile}.nc')

    return f'{outfile}.nc'


    